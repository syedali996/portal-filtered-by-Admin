_type: export
__export_format: 4
__export_source: apimatic.transformer
resources:
- name: Boku Direct Payments API
  _type: workspace
  _id: wrk_5173f4fb4a6a4a3fab52c82ac52259af
  description: >
    ## API Security


    Security is a significant consideration for payment platforms. As part of the registration process for each registered merchant account, merchants receive a security key used to authenticate communications in either direction.


    Developers should consult the [Boku API Signature Authentication Guide](page:guides/api-signature-authentication-guide) for additional details with respect to implementing security on the Boku APIs.


    ## API Usage


    When a consumer chooses to use a local payment-method (wallet), the consumer must go through an 'optin' flow to authenticate. This is accomplished using a redirect to the issuer's app or website where the consumer authenticates and completes the opt-in process.


    After the consumer adds their local payment-method (wallet), as their registered payment method, the 'charge' method is used to charge the consumer's local payment-method.


    If a customer decides to refund a transaction, the 'refund-charge' method can be used to refund the transaction.


    ## API Versioning


    The Boku Payment Gateway API is versioned to provide support for changes to functionality without affecting existing integrations.  Each API URL includes version information that enables distinct functionality across different versions.


    There are several types of changes that could result in a new API version:


    1. New API functionality – new APIs, new parameters, additional information in responses, improved error reporting.

    2. Deprecated API functionality – deprecated APIs, deprecated parameters, deprecated error messages.

    3. Changes in functionality – existing functional behavior changes such as the returned result of a call. A warning is changed to an error.  Validation becomes stricter or more lenient.


    In these cases, Boku will release a new API version through a new endpoint(s). When new versions of existing APIs are added, support for existing versions is maintained.  Unless otherwise stated, as a rule, compatibility is maintained across versions.  Prior supported endpoints should have unchanged behavior. If an API is deprecated and scheduled to be removed, a notice of not less than 6 months will be given.  Requests for extensions to this period can be considered.


    Boku may make changes to the API within an existing version without changing the version number. An example of a non-versioning change would be the addition of an optional field to a request or to a response.


    ## API Calls


    ### URL Scheme


    All the below API calls are against URLs that follow the pattern,


    ``

    https://${api-node}.boku.com/${api-family}/${api-version}/${api-call}

    ``


    Definitions for the above placeholders:


    * **api-node**: This follows the pattern '${country}-api4' (e.g. 'us-api4').
        * 'country' is the two letter country code of the end-user's payment-method against which the call is made.
        * The country code is required and is used for more efficient routing of the request.
        * The country code in the url must match the country code supplied in the `optin-request`.`country` element.
    * **api-family**: Groups a family of related API methods.
        * In this API, family is either one of:
            * 'optin' - For interacting with the user or handset to obtain billing approval.
            * 'billing' - For actually performing billing operations against the user.
    * **api-version**: In this version of the API, this value is always the string '3.0'.
        * Calls under different version numbers may be used in the future to introduce non-compatible API changes.
    * **api-call**: The name particular API call or method to invoke, for example 'charge' or 'refund-charge'.
        * This usually matches the XML root element name, sans the '-request' suffix.

    Fully qualified API call URLs are documented with each of the example calls detailed below.
- name: production
  data:
    default: https://jp-api4-stage.boku.com
  _type: environment
  _id: env_bb60e271699440f5a3d635018aee1d94
  parentId: wrk_5173f4fb4a6a4a3fab52c82ac52259af
- name: environment2
  data:
    default: https://jp-api4.boku.com
  _type: environment
  _id: env_1e979e11e3c24e808c94cf6dc52dc2c9
  parentId: wrk_5173f4fb4a6a4a3fab52c82ac52259af
- name: Consumer Registration
  _type: request_group
  _id: fld_0d82991f052843949f0c761beb0db640
  parentId: wrk_5173f4fb4a6a4a3fab52c82ac52259af
  description: >
    These methods are used to obtain consumer approval to register a local payment-method as a payment method. A successful 'optin' sequence results in a registered local payment method with a merchant.


    #### Opt-in Hosted


    | Step | Description | API |

    |------|-------------|-----|

    | 1 | Consumer comes into merchant from a country that has a local payment method(wallet) as a payment option. | |

    | 2 | Merchant collects payment-method (wallet) from consumer | |

    | 3 | Merchant sends the request to Boku to collect an approval (opt-in) from the consumer for payments | 'optin' API method |

    | 4 | Boku returns an optin URL to the merchant, to which a consumer must be redirected | |

    | 5 | Consumer completes the optin process on the issuer's app or website | |

    | 6 | Merchant polls Boku to retrieve the identity of the consumer | 'validate-optin' API method |

    | 7 | Merchant sends the confirmation to Boku to complete consumer authentication | 'confirm-optin' API method |

    | 8 | Boku responds with authentication success or failure. | |


    #### Cancel Opt-in


    | Step | Description | API |

    |------|-------------|-----|

    | 1 | Merchant sends the request to Boku to cancel a previously collected opt-in. Remove a payment method. | 'cancel-optin' API method |

    | 2 | Boku responds with success or failure | |


    #### Hosted opt-in consumer redirection


    When using an optin-type of hosted, the consumer must be redirected to the optin-url provided in the 'optin' response. The UI presented to the consumer will guide them through the authentication process.


    Upon completing authentication, the consumer will be redirected to the forward-url provided in the 'optin' request. A follow-up `validate-optin` call must be made in order to verify that the authentication succeeded.
- name: optin
  method: POST
  url: '{{default}}/optin/3.0/optin'
  body:
    mimeType: application/xml
    text: >-
      <optin-request>

        <country>JP</country>

        <merchant-id>gatewaymerchant</merchant-id>

        <merchant-request-id>2032405</merchant-request-id>

        <payment-method>superwallet</payment-method>

        <optin-type>hosted</optin-type>

        <hosted>

          <forward-url>https://merchant.com/redirect/2032405</forward-url>

        </hosted>

        <seller-of-record>

          <id>73tdolramou0m6jnqyb6pkk3</id>

        </seller-of-record>

      </optin-request>
  headers:
  - name: Content-Type
    value: application/xml
    disabled: false
  authentication: {}
  _type: request
  _id: req_4238f126576b4220a79629bf5e9122b9
  parentId: fld_0d82991f052843949f0c761beb0db640
  description: >-
    The 'optin' call initiates the consumer authentication process. After an `optin` call, an opt-in is usually in status `pending-validate`.


    The optin call types are


    * 'hosted' - redirect the consumer to an issuer-provided UI to perform verification.


    The 'optin' call is used in conjunction with the following related methods in order to complete consumer approval:


    * 'validate-optin' - identify and validate the billing account the consumer is registering as   their payment method.

    * 'confirm-optin' - confirm that the associated 'optin' should be activated for billing.


    It is possible to restrict an optin to be used for a single charge by specifying the 'terms' element. When provided, the system will only allow a single 'charge' request to be made for this optin.
- name: validateOptin
  method: POST
  url: '{{default}}/optin/3.0/validate-optin'
  body:
    mimeType: application/xml
    text: >-
      <validate-optin-request>

        <merchant-id>gatewaymerchant</merchant-id>

        <merchant-request-id>2032405</merchant-request-id>

        <optin-id>IVXecDoa2f6Y3oOqp1f7</optin-id>

        <optin-type>hosted</optin-type>

      </validate-optin-request>
  headers:
  - name: Content-Type
    value: application/xml
    disabled: false
  authentication: {}
  _type: request
  _id: req_7d2d037c32144a17bab021e8f835e396
  parentId: fld_0d82991f052843949f0c761beb0db640
  description: >-
    The main purpose of an opt-in is to identify and verify the payment method that the end-user wants to register. In the process, the user confirms that they have control over the corresponding payment method. Once an opt-in has begun via an `optin` API call, the `validate-optin` call is used to complete this verification and in most cases retrieve the end-user details such as the account identifier of the user.


    Specifically


    * **hosted**: Confirm successful authentication via opt-in UI, and retrieve the account   identifier of the user.


    After a successful `validate-optin` call, an opt-in should usually be in status `pending-confirm` awaiting a call to `confirm-optin`.
- name: confirmOptin
  method: POST
  url: '{{default}}/optin/3.0/confirm-optin'
  body:
    mimeType: application/xml
    text: >-
      <confirm-optin-request>

        <merchant-id>gatewaymerchant</merchant-id>

        <merchant-request-id>1002004</merchant-request-id>

        <optin-id>IVXecDoa2f6Y3oOqp1f7</optin-id>

      </confirm-optin-request>
  headers:
  - name: Content-Type
    value: application/xml
    disabled: false
  authentication: {}
  _type: request
  _id: req_768e2db17dff4dc6882fd6c7f8db3447
  parentId: fld_0d82991f052843949f0c761beb0db640
  description: Assuming an opt-in is in state `pending-confirm` (i.e. all necessary information about the end-user has already been collected), this call confirms that the opt-in should be activated for billing (after a successful call, optin-status should be `active`).
- name: cancelOptin
  method: POST
  url: '{{default}}/optin/3.0/cancel-optin'
  body:
    mimeType: application/xml
    text: >-
      <cancel-optin-request>

        <merchant-id>gatewaymerchant</merchant-id>

        <merchant-request-id>1002006</merchant-request-id>

        <optin-id>IVXecDoa2f6Y3oOqp1f7</optin-id>

      </cancel-optin-request>
  headers:
  - name: Content-Type
    value: application/xml
    disabled: false
  authentication: {}
  _type: request
  _id: req_5c2c29aaa4794d76bd15c51035f1ba17
  parentId: fld_0d82991f052843949f0c761beb0db640
  description: >-
    The purpose of the ‘cancel-optin’ API is for deactivating the consumer’s opt-in stored by Boku and the issuer.


    A merchant can use this method in the following possible scenarios:


    * User contacts the merchant requesting to remove their payment method

    * Merchant determines that the consumer’s billing account has encountered a permanent error   that should not be retried in the future


    A cancel-optin request **must** be sent when a user removes the payment method from the merchant account. Various payment methods enforce a 1:1 mapping, that is, a single payment method account can only be associated to a single merchant account. In the case that the merchant does not call cancel-optin, a user would be unable to associate their payment method account with any other merchant account, even though the user has already requested to remove the payment method from the merchant account.


    The 'optin-id' received from the 'optin' request at the time the consumer added their payment method must be supplied in the 'cancel-optin' request.
